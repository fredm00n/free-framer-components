/*

FIGLEAF V1.0 for Framer
A component for subtle and natural random variation
MIT License

// The MIT License

Copyright (c) 2021 Yann Bellot, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

import { ControlType, Color } from "framer"

// Return random value with min and max
function getRandomValue(min, max) {
    return Math.random() * (max - min) + min
}

// Return random value deviation
function getRandomGap(value, rValue, type) {
    // Simple deviation
    if (type === "NUMBER") {
        value = Math.round(value + getRandomValue(-rValue, rValue))
        return value
    }

    // Deviation in 0 to 100.
    if (type === "PURCENT") {
        value = Math.round(value + getRandomValue(-rValue, rValue))
        if (value > 100) {
            value = 100
        }
        if (value < 0) {
            value = 0
        }
        return value
    }

    // Deviation in 0 to 360Â° in loop (trigonometric circle)
    if (type === "TRIGO") {
        value = Math.round(value + getRandomValue(-rValue, rValue))
        if (value > 360) {
            value = value - 360
        }
        if (value < 0) {
            value = 360 + value
        }
        return value
    }
}

// ID link function
function fIdLink(id) {
    let link = "url(#" + id + ")"
    return link
}

// Mask ID generator
const characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

// Random identifier generator
function generateString(length) {
    let result = ""
    const charactersLength = characters.length
    for (let i = 0; i < length; i++) {
        result += characters.charAt(
            Math.floor(Math.random() * charactersLength)
        )
    }
    return result
}

// Figleaf color function
function fColor(
    hColor,
    rHcolor,
    sColor,
    rScolor,
    lColor,
    rLcolor,
    aColor,
    rAcolor
) {
    let rHue = getRandomGap(hColor, rHcolor, "TRIGO")
    let rSaturation = getRandomGap(sColor, rScolor, "PURCENT")
    let rLuminosity = getRandomGap(lColor, rLcolor, "PURCENT")
    let rAlpha = getRandomGap(aColor, rAcolor, "PURCENT")
    let color =
        "hsla(" +
        rHue +
        "," +
        rSaturation +
        "%," +
        rLuminosity +
        "%," +
        rAlpha +
        "%)"
    return color
}

// Figleaf stroke function
function fStroke(strokeWidth, rStroke) {
    strokeWidth = getRandomGap(strokeWidth, rStroke, "NUMBER")
    return strokeWidth
}

// Figleaf linear gradient function
function fLinearGradient(deg, rDeg, stopColor_1, stopColor_2) {
    let gradientDeg = getRandomGap(deg, rDeg, "TRIGO")
    let gradientColor =
        "linear-gradient(" +
        gradientDeg +
        "deg," +
        stopColor_1 +
        "," +
        stopColor_2 +
        ")"
    return gradientColor
}

// Figleaf linear gradient function
function fRadialGradient(type, hPosition, vPosition, stopColor_1, stopColor_2) {
    let gradientColor =
        "radial-gradient(" +
        type +
        " at " +
        hPosition +
        "% " +
        vPosition +
        "%," +
        stopColor_1 +
        "," +
        stopColor_2 +
        ")"
    return gradientColor
}

// Figleaf polygon points function

function fRect(
    width,
    height,
    strokeWidth,
    distortion,
    top,
    right,
    bottom,
    left
) {
    distortion = distortion / 100
    let x1 = Math.round(width * getRandomValue(0, distortion) + strokeWidth / 2)
    let y1 = Math.round(
        height * getRandomValue(0, distortion) + strokeWidth / 2
    )
    let x2 = Math.round(
        width - width * getRandomValue(0, distortion) - strokeWidth / 2
    )
    let y2 = Math.round(
        height * getRandomValue(0, distortion) + strokeWidth / 2
    )
    let x3 = Math.round(
        width - width * getRandomValue(0, distortion) - strokeWidth / 2
    )
    let y3 = Math.round(
        height - height * getRandomValue(0, distortion) - strokeWidth / 2
    )
    let x4 = Math.round(width * getRandomValue(0, distortion) + strokeWidth / 2)
    let y4 = Math.round(
        height - height * getRandomValue(0, distortion) - strokeWidth / 2
    )

    // Undo distortion of polygon sides (top, left, bottom, right)
    if (top == false) {
        y1 = 0 + strokeWidth / 2
        y2 = y1
    }
    if (right == false) {
        x2 = width - strokeWidth / 2
        x3 = x2
    }
    if (bottom == false) {
        y3 = height - strokeWidth / 2
        y4 = y3
    }
    if (left == false) {
        x1 = 0 + strokeWidth / 2
        x4 = x1
    }

    // Make SVG string of quadrilateral points attribute
    let points =
        x1 +
        ", " +
        y1 +
        " " +
        x2 +
        ", " +
        y2 +
        " " +
        x3 +
        ", " +
        y3 +
        " " +
        x4 +
        ", " +
        y4

    return points
}

// Figleaf circle "d" points function

function fCircle(diameter, strokeWidth, distortion) {
    //distortion = distortion / 100
    let thisRandomStepDiameter = (diameter / 2) * (distortion / 100)
    console.log(thisRandomStepDiameter)
    let radius =
        diameter / 2 -
        strokeWidth / 2 -
        getRandomValue(0, thisRandomStepDiameter)
    let thisRandomStep = (distortion * radius) / 100
    const alpha = 0.5522
    let rX1 = getRandomValue(0, thisRandomStep) + strokeWidth / 2
    let rX2 = getRandomValue(0, thisRandomStep) + strokeWidth / 2
    let rX3 = getRandomValue(0, thisRandomStep) + strokeWidth / 2
    let rX4 = getRandomValue(0, thisRandomStep) + strokeWidth / 2
    let rY1 = getRandomValue(0, thisRandomStep) + strokeWidth / 2
    let rY2 = getRandomValue(0, thisRandomStep) + strokeWidth / 2
    let rY3 = getRandomValue(0, thisRandomStep) + strokeWidth / 2
    let rY4 = getRandomValue(0, thisRandomStep) + strokeWidth / 2

    let x1 = radius + rX1
    let y1 = rY1
    let x2 = radius * 2 + rX2
    let y2 = radius + rY2
    let x3 = radius + rX3
    let y3 = radius * 2 + rY3
    let x4 = rX4
    let y4 = radius + rY4

    // Random handles generator
    let rX1handl = getRandomValue(0, thisRandomStep)
    let rX2handl = getRandomValue(0, thisRandomStep)
    let rX3handl = getRandomValue(0, thisRandomStep)
    let rX4handl = getRandomValue(0, thisRandomStep)
    let rY1handl = getRandomValue(0, thisRandomStep)
    let rY2handl = getRandomValue(0, thisRandomStep)
    let rY3handl = getRandomValue(0, thisRandomStep)
    let rY4handl = getRandomValue(0, thisRandomStep)

    // Define coordinate of circle points
    let x1a = radius - radius * alpha + rX1handl + rX1
    let y1a = rY1handl + rY1
    let x1b = radius + radius * alpha - rX1handl + rX1
    let y1b = 0 - rY1handl + rY1
    let x2a = radius * 2 + rX2handl + rX2
    let y2a = radius - radius * alpha + rY2handl + rY2
    let x2b = radius * 2 - rX2handl + rX2
    let y2b = radius + radius * alpha - rY2handl + rY2
    let x3a = radius + radius * alpha + rX3handl + rX3
    let y3a = radius * 2 + rY3handl + rY3
    let x3b = radius - radius * alpha - rX3handl + rX3
    let y3b = radius * 2 - rY3handl + rY3
    let x4a = rX4handl + rX4
    let y4a = radius + radius * alpha + rY4handl + rY4
    let x4b = 0 - rX4handl + rX4
    let y4b = radius - radius * alpha - rY4handl + rY4

    // SVG random circle coordinate string generator
    let randomSvgCircle =
        "M" +
        x1 +
        " " +
        y1 +
        " C" +
        x1b +
        " " +
        y1b +
        ", " +
        x2a +
        " " +
        y2a +
        ", " +
        x2 +
        " " +
        y2 +
        " C" +
        x2b +
        " " +
        y2b +
        ", " +
        x3a +
        " " +
        y3a +
        ", " +
        x3 +
        " " +
        y3 +
        " C" +
        x3b +
        " " +
        y3b +
        ", " +
        x4a +
        " " +
        y4a +
        ", " +
        x4 +
        " " +
        y4 +
        " C" +
        x4b +
        " " +
        y4b +
        ", " +
        x1a +
        " " +
        y1a +
        ", " +
        x1 +
        " " +
        y1
    return randomSvgCircle
}

// Function exports
export {
    getRandomValue,
    getRandomGap,
    fIdLink,
    generateString,
    fColor,
    fLinearGradient,
    fRadialGradient,
    fStroke,
    fRect,
    fCircle,
}
