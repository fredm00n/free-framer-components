/*

FIGLEAF V1.0 for Framer
A component for subtle and natural random variation
MIT License

// The MIT License

Copyright (c) 2021 Yann Bellot, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

import { addPropertyControls, ControlType, Color, Frame } from "framer"
import { motion } from "framer-motion"
import {
    childControl,
    useClonedChild,
} from "https://framer.com/m/framer/useChild.js"
import {
    getRandomValue,
    getRandomGap,
    fIdLink,
    generateString,
    fColor,
    fLinearGradient,
    fRadialGradient,
    fStroke,
    fRect,
} from "./BasicFunctions.tsx"

// Rectangle function
export default function Rectangle(props) {
    // Stroke width
    let strokeWidth
    if (props.undo_stroke === true) {
        strokeWidth = 0
    } else {
        strokeWidth = props.strokeWidth
    }

    // Stroke color
    let oStrokeColor = Color(props.hslColorStroke)
    let strokeColor = fColor(
        oStrokeColor.h,
        props.rHueStroke,
        oStrokeColor.s * 100,
        props.rSaturationStroke,
        oStrokeColor.l * 100,
        props.rLuminosityStroke,
        oStrokeColor.a * 100,
        props.rAlphaStroke
    )
    // Define the random coordonates of quadrilateral points
    let points = fRect(
        props.width,
        props.height,
        strokeWidth,
        props.intensity,
        props.undo_side,
        props.top,
        props.right,
        props.bottom,
        props.left
    )

    // Return the code of quadrilateral
    let width = props.width // Width of rectangle
    let height = props.height // Height of rectangle

    // Random ID generator
    let randomID = generateString(6)
    let clipPathID = "clipPath_" + randomID
    let urlClipPathID = "url(#" + clipPathID + ")"

    // CSS styles
    const divStyles = {
        width: width,
        height: height,
        overflow: "visible",
    }
    const svgStyles = {
        width: width,
        height: height,
        overflow: "visible",
    }
    const childrenStyles = {
        clipPath: urlClipPathID,
        overflow: "visible",
    }

    // SVG rectangle return
    return (
        <>
            <div style={divStyles}>
                <svg style={svgStyles}>
                    <clipPath id={clipPathID}>
                        <polygon points={points} fill="white" />
                    </clipPath>
                    <foreignObject
                        width={width}
                        height={height}
                        clipPath={urlClipPathID}
                    >
                        <div style={childrenStyles}>{props.children}</div>
                    </foreignObject>
                    <polygon
                        points={points}
                        strokeWidth={strokeWidth}
                        stroke={strokeColor}
                        fill="none"
                    />
                </svg>
            </div>
        </>
    )
}

// Property Controls
addPropertyControls(Rectangle, {
    width: {
        type: ControlType.Number,
        title: "Width",
        defaultValue: 200,
        min: 1,
        step: 1,
        displayStepper: true,
    },
    height: {
        type: ControlType.Number,
        title: "Height",
        defaultValue: 200,
        min: 1,
        step: 1,
        displayStepper: true,
    },

    // Distortion
    intensity: {
        type: ControlType.Number,
        title: "~distortion",
        defaultValue: 0,
        min: 0,
        max: 10,
        unit: "%",
        step: 0.1,
        displayStepper: false,
        description: "[Documentation](https://google.com)",
    },
    undo_side: {
        type: ControlType.Boolean,
        title: "Undo side",
        defaultValue: true,
        enabledTitle: "No",
        disabledTitle: "Yes",
    },
    top: {
        type: ControlType.Boolean,
        title: "~top",
        defaultValue: true,
        enabledTitle: "No",
        disabledTitle: "Yes",
        hidden(props) {
            return props.undo_side === true
        },
    },
    right: {
        type: ControlType.Boolean,
        title: "~right",
        defaultValue: true,
        enabledTitle: "No",
        disabledTitle: "Yes",
        hidden(props) {
            return props.undo_side === true
        },
    },
    bottom: {
        type: ControlType.Boolean,
        title: "~bottom",
        defaultValue: true,
        enabledTitle: "No",
        disabledTitle: "Yes",
        hidden(props) {
            return props.undo_side === true
        },
    },
    left: {
        type: ControlType.Boolean,
        title: "~left",
        defaultValue: true,
        enabledTitle: "No",
        disabledTitle: "Yes",
        hidden(props) {
            return props.undo_side === true
        },
    },

    // Fill
    children: {
        type: ControlType.ComponentInstance,
        title: "Fill",
    },

    // Stroke
    undo_stroke: {
        type: ControlType.Boolean,
        title: "Border",
        defaultValue: false,
        enabledTitle: "No",
        disabledTitle: "Yes",
    },
    strokeWidth: {
        type: ControlType.Number,
        title: "Width",
        defaultValue: 1,
        min: 0,
        max: 100,
        step: 1,
        displayStepper: false,
        hidden(props) {
            return props.undo_stroke === true
        },
    },
    hslColorStroke: {
        type: ControlType.Color,
        title: "Color",
        defaultValue: "hsla(329, 100%, 50%, 1)",
        hidden(props) {
            return props.undo_stroke === true
        },
    },
    rHueStroke: {
        type: ControlType.Number,
        title: "~hue",
        defaultValue: 0,
        min: 0,
        max: 360,
        unit: "Â°",
        step: 1,
        displayStepper: false,
        hidden(props) {
            return props.undo_stroke === true
        },
    },
    rSaturationStroke: {
        type: ControlType.Number,
        title: "~saturation",
        defaultValue: 0,
        min: 0,
        max: 100,
        unit: "%",
        step: 1,
        displayStepper: false,
        hidden(props) {
            return props.undo_stroke === true
        },
    },
    rLuminosityStroke: {
        type: ControlType.Number,
        title: "~luminosity",
        defaultValue: 0,
        min: 0,
        max: 100,
        unit: "%",
        step: 1,
        displayStepper: false,
        hidden(props) {
            return props.undo_stroke === true
        },
    },
    rAlphaStroke: {
        type: ControlType.Number,
        title: "~alpha",
        defaultValue: 0,
        min: 0,
        max: 100,
        unit: "%",
        step: 1,
        displayStepper: false,
        hidden(props) {
            return props.undo_stroke === true
        },
    },
})
